"use strict";
/*
 *  corba.js Object Request Broker (ORB) and Interface Definition Language (IDL) compiler
 *  Copyright (C) 2018, 2020 Mark-Andr√© Hopf <mhopf@mark13.org>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Node = exports.Type = void 0;
var Type;
(function (Type) {
    Type[Type["NONE"] = 0] = "NONE";
    Type[Type["TKN_IDENTIFIER"] = 1] = "TKN_IDENTIFIER";
    Type[Type["TKN_TEXT"] = 2] = "TKN_TEXT";
    Type[Type["TKN_COLON_COLON"] = 3] = "TKN_COLON_COLON";
    // CORBA 3.0 IDL keywords
    Type[Type["TKN_ABSTRACT"] = 4] = "TKN_ABSTRACT";
    Type[Type["TKN_ANY"] = 5] = "TKN_ANY";
    Type[Type["TKN_ATTRIBUTE"] = 6] = "TKN_ATTRIBUTE";
    Type[Type["TKN_BOOLEAN"] = 7] = "TKN_BOOLEAN";
    Type[Type["TKN_CASE"] = 8] = "TKN_CASE";
    Type[Type["TKN_CHAR"] = 9] = "TKN_CHAR";
    Type[Type["TKN_COMPONENT"] = 10] = "TKN_COMPONENT";
    Type[Type["TKN_CONST"] = 11] = "TKN_CONST";
    Type[Type["TKN_CONSUMES"] = 12] = "TKN_CONSUMES";
    Type[Type["TKN_CONTEXT"] = 13] = "TKN_CONTEXT";
    Type[Type["TKN_CUSTOM"] = 14] = "TKN_CUSTOM";
    Type[Type["TKN_DEFAULT"] = 15] = "TKN_DEFAULT";
    Type[Type["TKN_DOUBLE"] = 16] = "TKN_DOUBLE";
    Type[Type["TKN_EXCEPTION"] = 17] = "TKN_EXCEPTION";
    Type[Type["TKN_EMITS"] = 18] = "TKN_EMITS";
    Type[Type["TKN_ENUM"] = 19] = "TKN_ENUM";
    Type[Type["TKN_EVENTTYPE"] = 20] = "TKN_EVENTTYPE";
    Type[Type["TKN_FACTORY"] = 21] = "TKN_FACTORY";
    Type[Type["TKN_FALSE"] = 22] = "TKN_FALSE";
    Type[Type["TKN_FINDER"] = 23] = "TKN_FINDER";
    Type[Type["TKN_FIXED"] = 24] = "TKN_FIXED";
    Type[Type["TKN_FLOAT"] = 25] = "TKN_FLOAT";
    Type[Type["TKN_GETRAISES"] = 26] = "TKN_GETRAISES";
    Type[Type["TKN_HOME"] = 27] = "TKN_HOME";
    Type[Type["TKN_IMPORT"] = 28] = "TKN_IMPORT";
    Type[Type["TKN_IN"] = 29] = "TKN_IN";
    Type[Type["TKN_INOUT"] = 30] = "TKN_INOUT";
    Type[Type["TKN_INTERFACE"] = 31] = "TKN_INTERFACE";
    Type[Type["TKN_LOCAL"] = 32] = "TKN_LOCAL";
    Type[Type["TKN_LONG"] = 33] = "TKN_LONG";
    Type[Type["TKN_MODULE"] = 34] = "TKN_MODULE";
    Type[Type["TKN_MULTIPLE"] = 35] = "TKN_MULTIPLE";
    Type[Type["TKN_NATIVE"] = 36] = "TKN_NATIVE";
    Type[Type["TKN_OBJECT"] = 37] = "TKN_OBJECT";
    Type[Type["TKN_OCTET"] = 38] = "TKN_OCTET";
    Type[Type["TKN_ONEWAY"] = 39] = "TKN_ONEWAY";
    Type[Type["TKN_OUT"] = 40] = "TKN_OUT";
    Type[Type["TKN_PRIMARYKEY"] = 41] = "TKN_PRIMARYKEY";
    Type[Type["TKN_PRIVATE"] = 42] = "TKN_PRIVATE";
    Type[Type["TKN_PROVIDES"] = 43] = "TKN_PROVIDES";
    Type[Type["TKN_PUBLIC"] = 44] = "TKN_PUBLIC";
    Type[Type["TKN_PUBLISHES"] = 45] = "TKN_PUBLISHES";
    Type[Type["TKN_RAISES"] = 46] = "TKN_RAISES";
    Type[Type["TKN_READONLY"] = 47] = "TKN_READONLY";
    Type[Type["TKN_SETRAISES"] = 48] = "TKN_SETRAISES";
    Type[Type["TKN_SEQUENCE"] = 49] = "TKN_SEQUENCE";
    Type[Type["TKN_SHORT"] = 50] = "TKN_SHORT";
    Type[Type["TKN_STRING"] = 51] = "TKN_STRING";
    Type[Type["TKN_STRUCT"] = 52] = "TKN_STRUCT";
    Type[Type["TKN_SUPPORTS"] = 53] = "TKN_SUPPORTS";
    Type[Type["TKN_SWITCH"] = 54] = "TKN_SWITCH";
    Type[Type["TKN_TRUE"] = 55] = "TKN_TRUE";
    Type[Type["TKN_TRUNCATABLE"] = 56] = "TKN_TRUNCATABLE";
    Type[Type["TKN_TYPEDEF"] = 57] = "TKN_TYPEDEF";
    Type[Type["TKN_TYPEID"] = 58] = "TKN_TYPEID";
    Type[Type["TKN_TYPEPREFIX"] = 59] = "TKN_TYPEPREFIX";
    Type[Type["TKN_UNSIGNED"] = 60] = "TKN_UNSIGNED";
    Type[Type["TKN_UNION"] = 61] = "TKN_UNION";
    Type[Type["TKN_USES"] = 62] = "TKN_USES";
    Type[Type["TKN_VALUEBASE"] = 63] = "TKN_VALUEBASE";
    Type[Type["TKN_VALUETYPE"] = 64] = "TKN_VALUETYPE";
    Type[Type["TKN_VOID"] = 65] = "TKN_VOID";
    Type[Type["TKN_WCHAR"] = 66] = "TKN_WCHAR";
    Type[Type["TKN_WSTRING"] = 67] = "TKN_WSTRING";
    // nodes for the syntax parse tree
    Type[Type["SYN_SPECIFICATION"] = 68] = "SYN_SPECIFICATION";
    Type[Type["SYN_INTERFACE"] = 69] = "SYN_INTERFACE";
    Type[Type["SYN_INTERFACE_HEADER"] = 70] = "SYN_INTERFACE_HEADER";
    Type[Type["SYN_INTERFACE_BODY"] = 71] = "SYN_INTERFACE_BODY";
    Type[Type["SYN_VALUE_HEADER"] = 72] = "SYN_VALUE_HEADER";
    Type[Type["SYN_VALUE_INHERITANCE_SPEC"] = 73] = "SYN_VALUE_INHERITANCE_SPEC";
    Type[Type["SYN_STATE_MEMBER"] = 74] = "SYN_STATE_MEMBER";
    Type[Type["SYN_DECLARATORS"] = 75] = "SYN_DECLARATORS";
    Type[Type["SYN_OPERATION_DECLARATION"] = 76] = "SYN_OPERATION_DECLARATION";
    Type[Type["SYN_PARAMETER_DECLARATIONS"] = 77] = "SYN_PARAMETER_DECLARATIONS";
    Type[Type["SYN_PARAMETER_DECLARATION"] = 78] = "SYN_PARAMETER_DECLARATION";
    // synthetic tokens
    Type[Type["SYN_TYPENAME"] = 79] = "SYN_TYPENAME";
    // synthetic tokens combining other tokens
    Type[Type["SYN_LONGLONG"] = 80] = "SYN_LONGLONG";
    Type[Type["SYN_UNSIGNED_SHORT"] = 81] = "SYN_UNSIGNED_SHORT";
    Type[Type["SYN_UNSIGNED_LONG"] = 82] = "SYN_UNSIGNED_LONG";
    Type[Type["SYN_UNSIGNED_LONGLONG"] = 83] = "SYN_UNSIGNED_LONGLONG";
    Type[Type["SYN_LONG_DOUBLE"] = 84] = "SYN_LONG_DOUBLE";
})(Type = exports.Type || (exports.Type = {}));
class Node {
    constructor(type, text) {
        this.type = type;
        this.text = text;
        this.child = new Array();
    }
    toString() {
        switch (this.type) {
            case Type.NONE: return "none";
            case Type.TKN_TEXT: return "text '" + this.text + "'";
            case Type.TKN_IDENTIFIER: return "identifier '" + this.text + "'";
            case Type.TKN_COLON_COLON: return "::";
            case Type.TKN_ABSTRACT: return "abstract";
            case Type.TKN_ANY: return "any";
            case Type.TKN_ATTRIBUTE: return "attribute";
            case Type.TKN_BOOLEAN: return "boolean";
            case Type.TKN_CASE: return "case";
            case Type.TKN_CHAR: return "char";
            case Type.TKN_COMPONENT: return "component";
            case Type.TKN_CONST: return "const";
            case Type.TKN_CONSUMES: return "consumes";
            case Type.TKN_CONTEXT: return "context";
            case Type.TKN_CUSTOM: return "custom";
            case Type.TKN_DEFAULT: return "default";
            case Type.TKN_DOUBLE: return "double";
            case Type.TKN_EXCEPTION: return "exception";
            case Type.TKN_EMITS: return "emits";
            case Type.TKN_ENUM: return "enum";
            case Type.TKN_EVENTTYPE: return "eventtype";
            case Type.TKN_FACTORY: return "factory";
            case Type.TKN_FALSE: return "FALSE";
            case Type.TKN_FINDER: return "finder";
            case Type.TKN_FIXED: return "fixed";
            case Type.TKN_FLOAT: return "float";
            case Type.TKN_GETRAISES: return "getraises";
            case Type.TKN_HOME: return "home";
            case Type.TKN_IMPORT: return "import";
            case Type.TKN_IN: return "in";
            case Type.TKN_INOUT: return "inout";
            case Type.TKN_INTERFACE: return "interface";
            case Type.TKN_LOCAL: return "local";
            case Type.TKN_LONG: return "long";
            case Type.TKN_MODULE: return "module";
            case Type.TKN_MULTIPLE: return "multiple";
            case Type.TKN_NATIVE: return "native";
            case Type.TKN_OBJECT: return "Object";
            case Type.TKN_OCTET: return "octet";
            case Type.TKN_ONEWAY: return "oneway";
            case Type.TKN_OUT: return "out";
            case Type.TKN_PRIMARYKEY: return "primarykey";
            case Type.TKN_PRIVATE: return "private";
            case Type.TKN_PROVIDES: return "provides";
            case Type.TKN_PUBLIC: return "public";
            case Type.TKN_PUBLISHES: return "publishes";
            case Type.TKN_RAISES: return "raises";
            case Type.TKN_READONLY: return "readonly";
            case Type.TKN_SETRAISES: return "setraises";
            case Type.TKN_SEQUENCE: return "sequence";
            case Type.TKN_SHORT: return "short";
            case Type.TKN_STRING: return "string";
            case Type.TKN_STRUCT: return "struct";
            case Type.TKN_SUPPORTS: return "supports";
            case Type.TKN_SWITCH: return "switch";
            case Type.TKN_TRUE: return "TRUE";
            case Type.TKN_TRUNCATABLE: return "truncatable";
            case Type.TKN_TYPEDEF: return "typedef";
            case Type.TKN_TYPEID: return "typeid";
            case Type.TKN_TYPEPREFIX: return "typeprefix";
            case Type.TKN_UNSIGNED: return "unsigned";
            case Type.TKN_UNION: return "union";
            case Type.TKN_USES: return "uses";
            case Type.TKN_VALUEBASE: return "ValueBase";
            case Type.TKN_VALUETYPE: return "valuetype";
            case Type.TKN_VOID: return "void";
            case Type.TKN_WCHAR: return "wchar";
            case Type.TKN_WSTRING: return "wstring";
            case Type.SYN_SPECIFICATION: return "SYN_SPECIFICATION"; // 1
            case Type.SYN_INTERFACE: return "SYN_INTERFACE"; // 5
            case Type.SYN_INTERFACE_HEADER: return "SYN_INTERFACE_HEADER"; // 7
            case Type.SYN_INTERFACE_BODY: return "SYN_INTERFACE_BODY"; // 8
            case Type.SYN_VALUE_HEADER: return "SYN_VALUE_HEADER"; // 18
            case Type.SYN_VALUE_INHERITANCE_SPEC: return "SYN_VALUE_INHERITANCE_SPEC"; // 19
            case Type.SYN_STATE_MEMBER: return "SYN_STATE_MEMBER"; // 22
            case Type.SYN_DECLARATORS: return "SYN_DECLARATORS"; // 49
            case Type.SYN_OPERATION_DECLARATION: return "SYN_OPERATION_DECLARATION"; // 87
            case Type.SYN_PARAMETER_DECLARATIONS: return "SYN_PARAMETER_DECLARATIONS"; // 90
            case Type.SYN_PARAMETER_DECLARATION: return "SYN_PARAMETER_DECLARATION"; // 91
            case Type.SYN_TYPENAME: return "SYN_TYPENAME";
            case Type.SYN_LONGLONG: return "long long";
            case Type.SYN_UNSIGNED_SHORT: return "unsigned short";
            case Type.SYN_UNSIGNED_LONG: return "unsigned long";
            case Type.SYN_UNSIGNED_LONGLONG: return "unsigned long long";
            case Type.SYN_LONG_DOUBLE: return "long double";
        }
        throw Error("Node.toString(): unknown type " + String(this.type));
    }
    printTree(depth = 0) {
        let indent = "";
        for (let i = 0; i < depth; ++i)
            indent = indent + "    ";
        console.log(indent + this.toString());
        for (let c of this.child) {
            if (c === undefined) {
                console.log(indent + "    undefined");
            }
            else {
                c.printTree(depth + 1);
            }
        }
    }
    append(node) {
        this.child.push(node);
    }
    prepend(node) {
        this.child.unshift(node);
    }
}
exports.Node = Node;
//# sourceMappingURL=idl-node.js.map