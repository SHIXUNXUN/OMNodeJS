export declare enum Type {
    NONE = 0,
    TKN_IDENTIFIER = 1,
    TKN_TEXT = 2,
    TKN_COLON_COLON = 3,
    TKN_ABSTRACT = 4,
    TKN_ANY = 5,
    TKN_ATTRIBUTE = 6,
    TKN_BOOLEAN = 7,
    TKN_CASE = 8,
    TKN_CHAR = 9,
    TKN_COMPONENT = 10,
    TKN_CONST = 11,
    TKN_CONSUMES = 12,
    TKN_CONTEXT = 13,
    TKN_CUSTOM = 14,
    TKN_DEFAULT = 15,
    TKN_DOUBLE = 16,
    TKN_EXCEPTION = 17,
    TKN_EMITS = 18,
    TKN_ENUM = 19,
    TKN_EVENTTYPE = 20,
    TKN_FACTORY = 21,
    TKN_FALSE = 22,
    TKN_FINDER = 23,
    TKN_FIXED = 24,
    TKN_FLOAT = 25,
    TKN_GETRAISES = 26,
    TKN_HOME = 27,
    TKN_IMPORT = 28,
    TKN_IN = 29,
    TKN_INOUT = 30,
    TKN_INTERFACE = 31,
    TKN_LOCAL = 32,
    TKN_LONG = 33,
    TKN_MODULE = 34,
    TKN_MULTIPLE = 35,
    TKN_NATIVE = 36,
    TKN_OBJECT = 37,
    TKN_OCTET = 38,
    TKN_ONEWAY = 39,
    TKN_OUT = 40,
    TKN_PRIMARYKEY = 41,
    TKN_PRIVATE = 42,
    TKN_PROVIDES = 43,
    TKN_PUBLIC = 44,
    TKN_PUBLISHES = 45,
    TKN_RAISES = 46,
    TKN_READONLY = 47,
    TKN_SETRAISES = 48,
    TKN_SEQUENCE = 49,
    TKN_SHORT = 50,
    TKN_STRING = 51,
    TKN_STRUCT = 52,
    TKN_SUPPORTS = 53,
    TKN_SWITCH = 54,
    TKN_TRUE = 55,
    TKN_TRUNCATABLE = 56,
    TKN_TYPEDEF = 57,
    TKN_TYPEID = 58,
    TKN_TYPEPREFIX = 59,
    TKN_UNSIGNED = 60,
    TKN_UNION = 61,
    TKN_USES = 62,
    TKN_VALUEBASE = 63,
    TKN_VALUETYPE = 64,
    TKN_VOID = 65,
    TKN_WCHAR = 66,
    TKN_WSTRING = 67,
    SYN_SPECIFICATION = 68,
    SYN_INTERFACE = 69,
    SYN_INTERFACE_HEADER = 70,
    SYN_INTERFACE_BODY = 71,
    SYN_VALUE_HEADER = 72,
    SYN_VALUE_INHERITANCE_SPEC = 73,
    SYN_STATE_MEMBER = 74,
    SYN_DECLARATORS = 75,
    SYN_OPERATION_DECLARATION = 76,
    SYN_PARAMETER_DECLARATIONS = 77,
    SYN_PARAMETER_DECLARATION = 78,
    SYN_TYPENAME = 79,
    SYN_LONGLONG = 80,
    SYN_UNSIGNED_SHORT = 81,
    SYN_UNSIGNED_LONG = 82,
    SYN_UNSIGNED_LONGLONG = 83,
    SYN_LONG_DOUBLE = 84
}
export declare class Node {
    type: Type;
    text?: string;
    typeParent: Node | undefined;
    child: Array<Node | undefined>;
    constructor(type: Type, text?: string);
    toString(): string;
    printTree(depth?: number): void;
    append(node: Node | undefined): void;
    prepend(node: Node | undefined): void;
}
