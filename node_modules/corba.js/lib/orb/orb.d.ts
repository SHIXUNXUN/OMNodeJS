export interface valueTypeInformation {
    attributes: Array<string>;
    name?: string;
    construct?: Function;
}
export declare class ORB implements EventTarget {
    debug: number;
    name: string;
    socket?: any;
    stubsByName: Map<string, any>;
    stubsById: Map<number, Stub>;
    servants: Array<Skeleton | undefined>;
    unusedServantIds: Array<number>;
    accesibleServants: Set<Skeleton>;
    static valueTypeByName: Map<string, valueTypeInformation>;
    static valueTypeByPrototype: Map<any, valueTypeInformation>;
    initialReferences: Map<string, any>;
    reqid: number;
    listeners: Map<string, Set<EventListenerOrEventListenerObject>>;
    constructor(orb?: ORB);
    addEventListener(type: string, listener: EventListenerOrEventListenerObject | null, options?: boolean | AddEventListenerOptions): void;
    removeEventListener(type: string, listener?: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;
    dispatchEvent(event: Event): boolean;
    set onclose(listener: EventListenerOrEventListenerObject | null);
    registerServant(servant: Skeleton): number;
    unregisterServant(servant: Skeleton): void;
    registerStubClass(aStubClass: any): void;
    releaseStub(stub: Stub): void;
    static registerValueType(name: string, valuetypeConstructor: Function): void;
    static lookupValueType(name: string): any;
    bind(id: string, obj: any): void;
    list(): Promise<Array<string>>;
    resolve(id: string): Promise<Stub>;
    serialize(object: any): string;
    deserialize(text: string): any;
    _deserialize(data: any): any;
    connect(url: string): Promise<void>;
    send(data: any, oneway?: boolean): Promise<any>;
    call(stub: Stub, oneway: boolean, method: string, params: Array<any>): Promise<any>;
    release(): void;
    aclAdd(servant: Skeleton): void;
    aclDeleteAll(): void;
    handleMethod(msg: any): void;
    handleListInitialReferences(msg: any): void;
    handleResolveInitialReferences(msg: any): void;
    listen(host: string, port: number): Promise<void>;
    accept(): void;
}
export declare abstract class CORBAObject {
    orb: ORB;
    id: number;
    constructor(orb: ORB, id: number);
}
export declare abstract class Skeleton extends CORBAObject {
    acl: Set<ORB>;
    constructor(orb: ORB);
    release(): void;
}
export declare abstract class Stub extends CORBAObject {
    constructor(orb: ORB, remoteID: number);
    release(): void;
}
