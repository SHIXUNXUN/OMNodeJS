"use strict";
/*
 *  corba.js Object Request Broker (ORB) and Interface Definition Language (IDL) compiler
 *  Copyright (C) 2018 Mark-Andr√© Hopf <mhopf@mark13.org>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ORB = exports.Stub = exports.Skeleton = void 0;
const WebSocket = require("ws");
const Browser = require("./orb");
var orb_1 = require("./orb");
Object.defineProperty(exports, "Skeleton", { enumerable: true, get: function () { return orb_1.Skeleton; } });
Object.defineProperty(exports, "Stub", { enumerable: true, get: function () { return orb_1.Stub; } });
class ORB extends Browser.ORB {
    constructor(orb) {
        super(orb);
    }
    ///
    /// Server
    ///
    /*  FIXME: add wss:// support
        const https = require('https');
        const fs = require('fs');
        const WebSocket = require('ws');
        const server = https.createServer({
            cert: fs.readFileSync('../test/fixtures/certificate.pem'),
            key: fs.readFileSync('../test/fixtures/key.pem')
        });
        const wss = new WebSocket.Server({ server });
    */
    listen(host, port) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                const wss = new WebSocket.Server({ host: host, port: port }, function () {
                    resolve();
                });
                wss.on("error", (error) => {
                    switch (error.code) {
                        case "EADDRINUSE":
                            reject(new Error("another server is already running at " + error.address + ":" + error.port));
                            break;
                        default:
                            reject(error);
                    }
                });
                wss.on("connection", (socket) => {
                    let orb = new ORB(this);
                    orb.socket = socket;
                    orb.accept();
                });
            });
        });
    }
    accept() {
        this.socket.onmessage = (message) => {
            if (this.debug > 0) {
                console.log("ORB.accept(): got message ", message.data);
            }
            let msg = JSON.parse(String(message.data));
            if (msg.corba !== "1.0") {
                throw Error("expected corba version 1.0 but got " + msg.corba);
            }
            if (msg.method !== undefined) {
                try {
                    this.handleMethod(msg);
                }
                catch (error) {
                    if (error instanceof Error)
                        console.log(error.message);
                    throw error;
                }
            }
            else if (msg.list !== undefined) {
                this.handleListInitialReferences(msg);
            }
            else if (msg.resolve !== undefined) {
                this.handleResolveInitialReferences(msg);
            }
        };
        this.socket.onerror = (error) => {
            console.log("error", error);
        };
        this.socket.onclose = (event) => {
            this.dispatchEvent(event);
            this.release();
        };
    }
}
exports.ORB = ORB;
//# sourceMappingURL=orb-nodejs.js.map